{
  "chapter1": {
    "title": "DisplayList, DisplayObject, and DisplayObjectContainer",
    "text1": "DisplayList consists of three major elements: 'Stage', 'DisplayObjectContainer', and 'DisplayObject'.",
    "text2": "'Stage' is an object that holds all 'DisplayObject'.",
    "text3": "'DisplayObjectContainer' is a 'DisplayObject' that can be used to place DisplayObjects, and it inherits from the following four classes.",
    "text4": "'DisplayObject' is an object that executes the drawing process. 9 classes inheriting from 'DisplayObject' are as follows.",
    "text5": "To add a 'DisplayObject' to a 'DisplayObjectContainer', use the addChild method of the DisplayObjectContainer."
  },
  "chapter2": {
    "title": "Adding and removing DisplayObjects from DisplayObjectContainer",
    "text1": "index is a sequentially numbered integer starting from 0, with 0 being the farthest back and higher values being the farthest forward. The index cannot be a negative value or a number greater than the current highest index plus one.",
    "text2": "addChild method adds a DisplayObject to the foremost position in the DisplayObjectContainer.",
    "text3": "addChildAt method adds a DisplayObject to the specified index position in the DisplayObjectContainer.",
    "text4": "removeChild and removeChildAt methods remove the specified DisplayObject from the DisplayObjectContainer. If there are any DisplayObjects after the removed index, they will be relocated to a smaller index position."
  },
  "chapter3": {
    "title": "Events when DisplayObjects are added to or removed from DisplayObjectContainer",
    "text1": "The added event is an Event object that is sent when a DisplayObject is added by the addChild or addChildAt function of DisplayObjectContainer.",
    "text2": "The addedToStage event is a similar event, but it is an Event object that is sent out when a DisplayObjectContainer is added to a DisplayList and displayed on the screen.",
    "text3": "The removed event is an event object that is sent when a DisplayObject is removed from a DisplayObjectContainer using the removeChild or removeChildAt function of the DisplayObjectContainer. The removed event is an event object sent when a DisplayObject is removed from the DisplayObjectContainer using the removeChild or removeChildAt function of the DisplayObjectContainer. It is also sent when a DisplayObjectContainer is moved from its existing position to a specified position using the addChild and addChildAt functions.",
    "text4": "The removedFromStage event is a similar event, but it is an Event object that is sent out when the DisplayObjectContainer is removed from the DisplayList and disappears from the screen."
  },
  "chapter4": {
    "title": "Checking and changing the overlapping order of DisplayObjects in a container",
    "text1": "getChildIndex method returns the index of the DisplayObject specified by the argument in the order of overlap.",
    "text2": "The setChildIndex function repositions the DisplayObject specified in the first argument to the position specified in the second argument. This repositioning can be done in the same way with the addChildAt method.",
    "text3": "The swapChildren function swaps the overlapping order (index position) of two DisplayObjects specified by the argument.",
    "text4": "The swapChildrenAt function swaps the overlapping order (index position) of two DisplayObjects specified by the argument index. The addChild method is used to reposition a DisplayObject to the top level."
  },
  "chapter5": {
    "title": "Determine the number of DisplayObjects and whether they are DisplayObjects in a container",
    "text1": "numChildren property represents the number of DisplayObject in the child element. It does not include the grandchild elements.",
    "text2": "contains is a function that checks if the DisplayObject specified in the argument is a child element of DisplayObjectContainer. The return value is a boolean value, true if the DisplayObject is a child object or DisplayObjectContainer itself, false otherwise."
  },
  "chapter6": {
    "title": "Refers to a DisplayObject in a container by specifying the index instance name",
    "text1": "The getChildAt function gets the reference to the child element object from the index of the stacking order.",
    "text2": "The getChildByName function obtains a reference to a child element object from its instance name."
  },
  "chapter7": {
    "title": "Reference to parent DisplayObjectContainer and root DisplayObjectContainer",
    "text1": "The parent property points to the parent DisplayObjectContainer. Multiple parents can be used to go back to the ancestor. However, if no child elements of the DisplayObjectContainer are registered, null will be returned.",
    "text2": "The root property points to the parent DisplayObjectContainer at the highest level of the hierarchy. In most cases this will be the DisplayObjectContainer directly below the Stage. However, it will return null if there are no children of the DisplayObjectContainer registered."
  },
  "chapter8": {
    "title": "Set or change the DisplayObject name.",
    "text1": "A property that represents the DisplayObject name. Both reference and assignment are possible. We recommend using alphanumeric characters and underscore (_) for the name. The named DisplayObject can be accessed with this.{{ DisplayObject name }}."
  },
  "chapter9": {
    "title": "Move the position of the DisplayObject",
    "text1": "The x and y coordinates of the DisplayObject with respect to the local coordinates of the parent DisplayObjectContainer, which can be moved by assigning a value (Number) to the xy property."
  },








  "chapter0": {
    "title": "",
    "text1": "",
    "text2": "",
    "text3": "",
    "text4": ""
  }
}
